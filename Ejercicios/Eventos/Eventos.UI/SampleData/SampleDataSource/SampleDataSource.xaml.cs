//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.SampleDataSource
{
	using System; 
	using System.ComponentModel;

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class SampleDataSource { }
#else

	public class SampleDataSource : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		public SampleDataSource()
		{
			try
			{
				Uri resourceUri = new Uri("/Eventos.UI;component/SampleData/SampleDataSource/SampleDataSource.xaml", UriKind.RelativeOrAbsolute);
				System.Windows.Application.LoadComponent(this, resourceUri);
			}
			catch
			{
			}
		}

		private Days _Days = new Days();

		public Days Days
		{
			get
			{
				return this._Days;
			}
		}

		private Activities1 _Activities = new Activities1();

		public Activities1 Activities
		{
			get
			{
				return this._Activities;
			}
		}

		private EventInfo _EventInfo = new EventInfo();

		public EventInfo EventInfo
		{
			get
			{
				return this._EventInfo;
			}

			set
			{
				if (this._EventInfo != value)
				{
					this._EventInfo = value;
					this.OnPropertyChanged("EventInfo");
				}
			}
		}

		private Activity _Activity = new Activity();

		public Activity Activity
		{
			get
			{
				return this._Activity;
			}

			set
			{
				if (this._Activity != value)
				{
					this._Activity = value;
					this.OnPropertyChanged("Activity");
				}
			}
		}
	}

	public class Days : System.Collections.ObjectModel.ObservableCollection<DaysItem>
	{ 
	}

	public class DaysItem : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private Activities _Activities = new Activities();

		public Activities Activities
		{
			get
			{
				return this._Activities;
			}
		}

		private string _Date = string.Empty;

		public string Date
		{
			get
			{
				return this._Date;
			}

			set
			{
				if (this._Date != value)
				{
					this._Date = value;
					this.OnPropertyChanged("Date");
				}
			}
		}
	}

	public class Activities : System.Collections.ObjectModel.ObservableCollection<ActivitiesItem>
	{ 
	}

	public class ActivitiesItem : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}

		private string _Description = string.Empty;

		public string Description
		{
			get
			{
				return this._Description;
			}

			set
			{
				if (this._Description != value)
				{
					this._Description = value;
					this.OnPropertyChanged("Description");
				}
			}
		}

		private string _Time = string.Empty;

		public string Time
		{
			get
			{
				return this._Time;
			}

			set
			{
				if (this._Time != value)
				{
					this._Time = value;
					this.OnPropertyChanged("Time");
				}
			}
		}
	}

	public class Activities1 : System.Collections.ObjectModel.ObservableCollection<ActivitiesItem1>
	{ 
	}

	public class ActivitiesItem1 : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Time = string.Empty;

		public string Time
		{
			get
			{
				return this._Time;
			}

			set
			{
				if (this._Time != value)
				{
					this._Time = value;
					this.OnPropertyChanged("Time");
				}
			}
		}

		private string _Description = string.Empty;

		public string Description
		{
			get
			{
				return this._Description;
			}

			set
			{
				if (this._Description != value)
				{
					this._Description = value;
					this.OnPropertyChanged("Description");
				}
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}
	}

	public class EventInfo : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}

		private string _StartDate = string.Empty;

		public string StartDate
		{
			get
			{
				return this._StartDate;
			}

			set
			{
				if (this._StartDate != value)
				{
					this._StartDate = value;
					this.OnPropertyChanged("StartDate");
				}
			}
		}

		private string _EndDate = string.Empty;

		public string EndDate
		{
			get
			{
				return this._EndDate;
			}

			set
			{
				if (this._EndDate != value)
				{
					this._EndDate = value;
					this.OnPropertyChanged("EndDate");
				}
			}
		}

		private string _Description = string.Empty;

		public string Description
		{
			get
			{
				return this._Description;
			}

			set
			{
				if (this._Description != value)
				{
					this._Description = value;
					this.OnPropertyChanged("Description");
				}
			}
		}
	}

	public class Activity : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Time = string.Empty;

		public string Time
		{
			get
			{
				return this._Time;
			}

			set
			{
				if (this._Time != value)
				{
					this._Time = value;
					this.OnPropertyChanged("Time");
				}
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}

		private string _Description = string.Empty;

		public string Description
		{
			get
			{
				return this._Description;
			}

			set
			{
				if (this._Description != value)
				{
					this._Description = value;
					this.OnPropertyChanged("Description");
				}
			}
		}
	}
#endif
}
